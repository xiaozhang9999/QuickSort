class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        k=nums.size()-k;
        int p=find(nums,0,nums.size()-1,k);
       return nums[p];
      
    }
    int find(vector<int>& nums, int l,int r,int k){
        int p=partition(nums,l,r,k);
        if(p==k) return p;
        else if(k<p){
            return find(nums,l,p-1,k);
        }
        else{
            return find(nums,p+1,r,k);
        }
    }
    int partition(vector<int>&arr, int l, int r,int k)
    {
        int j = l;
        for (int i = l + 1; i <= r; i++) {
            if (arr[i] < arr[l]) {
                j++;
                swap(arr, i, j);
            }
        }
        swap(arr, l, j);
        return j;
    }
    void swap(vector<int>&arr, int i, int j)
    {
        int t = arr[j];
        arr[j] = arr[i];
        arr[i] = t;
    }
};